//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.11.25 at 12:23:12 PM CET 
//


package no.difi.meldingsutveksling.domain.sbdh;

import net.logstash.logback.marker.LogstashMarker;
import no.difi.meldingsutveksling.domain.MeldingsUtvekslingRuntimeException;
import no.difi.meldingsutveksling.domain.MessageInfo;
import no.difi.meldingsutveksling.domain.Payload;
import org.eclipse.persistence.jaxb.JAXBContextFactory;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.*;
import java.util.List;


/**
 * <p>Java class for StandardBusinessDocument complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StandardBusinessDocument">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader}StandardBusinessDocumentHeader" minOccurs="0"/>
 *         &lt;any processContents='lax' namespace='##other'/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StandardBusinessDocument", propOrder = {
    "standardBusinessDocumentHeader",
    "any"
})
public class StandardBusinessDocument {

    @XmlElement(name = "StandardBusinessDocumentHeader")
    private StandardBusinessDocumentHeader standardBusinessDocumentHeader;
    @XmlAnyElement(lax = true)
    protected Object any;

    /**
     * Gets the value of the standardBusinessDocumentHeader property.
     * 
     * @return
     *     possible object is
     *     {@link StandardBusinessDocumentHeader }
     *     
     */
    public StandardBusinessDocumentHeader getStandardBusinessDocumentHeader() {
        return standardBusinessDocumentHeader;
    }

    /**
     * Sets the value of the standardBusinessDocumentHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link StandardBusinessDocumentHeader }
     *     
     */
    public void setStandardBusinessDocumentHeader(StandardBusinessDocumentHeader value) {
        this.standardBusinessDocumentHeader = value;
    }

    /**
     * Gets the value of the any property.
     * 
     * @return
     *     possible object is
     *     {@link Element }
     *     {@link Object }
     *     
     */
    public Object getAny() {
        return any;
    }

    /**
     * Sets the value of the any property.
     * 
     * @param value
     *     allowed object is
     *     {@link Element }
     *     {@link Object }
     *     
     */
    public void setAny(Object value) {
        this.any = value;
    }

    public MessageInfo getMessageInfo() {
        return new MessageInfo(getReceiverOrgNumber(), getSenderOrgNumber(), getJournalPostId(), getConversationId(), getMessageType());
    }

    public String getSenderOrgNumber() {
        return getStandardBusinessDocumentHeader().getSender().get(0).getIdentifier().getValue().split(":")[1];
    }

    public String getReceiverOrgNumber() {
        return getStandardBusinessDocumentHeader().getReceiver().get(0).getIdentifier().getValue().split(":")[1];
    }

    public final String getJournalPostId() {
        return findScope(ScopeType.JOURNALPOST_ID).getInstanceIdentifier();
    }

    public String getConversationId() {
        return findScope(ScopeType.CONVERSATION_ID).getInstanceIdentifier();
    }

    private Scope findScope(ScopeType scopeType) {
        final List<Scope> scopes = getStandardBusinessDocumentHeader().getBusinessScope().getScope();
        for (Scope scope : scopes) {
            if (scopeType.name().equals(scope.getType())) {
                return scope;
            }
        }
        return new Scope();
    }

    public String getMessageType() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getType();
    }

    public String getDocumentId() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getInstanceIdentifier();
    }

    public boolean isReceipt() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getType().equalsIgnoreCase(StandardBusinessDocumentHeader.KVITTERING_TYPE);
    }

    public boolean isNextMove() {
        return StandardBusinessDocumentHeader.NEXTMOVE_TYPE.equalsIgnoreCase(getStandardBusinessDocumentHeader().getDocumentIdentification().getType());
    }

    public Payload getPayload() {
        if (getAny() instanceof Payload) {
            return (Payload) getAny();
        } else if (getAny() instanceof Node) {
            return unmarshallAnyElement(getAny());
        } else {
            throw new MeldingsUtvekslingRuntimeException("Could not cast any element " + getAny() + " from " + StandardBusinessDocument.class + " to " + Payload.class);
        }
    }

    private Payload unmarshallAnyElement(Object any) {
        JAXBContext jaxbContextP;
        Unmarshaller unMarshallerP;
        Payload payload;
        try {
            jaxbContextP = JAXBContextFactory.createContext(new Class[]{Payload.class}, null);
            unMarshallerP = jaxbContextP.createUnmarshaller();
            payload = unMarshallerP.unmarshal((org.w3c.dom.Node) any, Payload.class).getValue();
        } catch (JAXBException e) {
            throw new MeldingsUtvekslingRuntimeException(e);
        }
        return payload;
    }

    public LogstashMarker createLogstashMarkers() {
        return getMessageInfo().createLogstashMarkers();
    }
}
